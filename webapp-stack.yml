# Note, this code use NatGateway instead of NatInstance.
# Its much simpler and reliable structure, but its not free tier
# http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-comparison.html
#
# NatGateway start charges immediately when its turn on. ~ ($0.045 per hour)
# For more detail refer, https://aws.amazon.com/vpc/pricing/
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
    Javier Caparo / Udagram Project - Udacity Dev Ops Nanodegree.
Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resources
        Type: String
        Default: "MyUdagramProject"

    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this
        Type: String
        Default: 10.0.0.0/16

    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the Subnet
        Type: String
        Default: 10.0.10.0/24

    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the Subnet
        Type: String
        Default: 10.0.20.0/24
        
    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the Subnet
        Type: String
        Default: 10.0.30.0/24

    PrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the Subnet
        Type: String
        Default: 10.0.40.0/24

    InstanceType:
        Description: The EC2 instance type of general purpose
        Type: String
        AllowedValues: [ t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge]
        Default: "t2.small"

    WebServerCapacity:
      Default: '4'
      Description : The initial number of WebServer instances
      Type: Number
      MinValue: '1'
      MaxValue: '6'
      ConstraintDescription: must be between 1 and 6 EC2 instances.
    
    KeyPairName:
      Description: Name of key-pair (PEM) file.
      Type: String
      Default: 'jc-udacity-devops'

####### RESOURCES #######
Resources:
####### Create custom VPC and send log to S3 bucket #######
    VPC:
        Type: AWS::EC2::VPC
        Properties:
          CidrBlock: !Ref VpcCIDR
          EnableDnsSupport: true
          EnableDnsHostnames: true
          Tags:
              - Key: Name
                Value: !Ref EnvironmentName
              - Key: Application
                Value:
                  Ref: AWS::StackName

####### Create Public Subnets #######    
    PublicSubnet1:
        Type: AWS::EC2::Subnet
        DependsOn:
        - VPC
        Properties:
          VpcId: !Ref VPC 
          AvailabilityZone: !Select [ 0, !GetAZs '' ]
          CidrBlock: !Ref PublicSubnet1CIDR
          MapPublicIpOnLaunch: false
          Tags: 
            - Key: Name
              Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
            - Key: Application
              Value:
                Ref: AWS::StackName

    PublicSubnet2:
        Type: AWS::EC2::Subnet
        DependsOn:
        - VPC
        Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs '' ]
          CidrBlock: !Ref PublicSubnet2CIDR
          MapPublicIpOnLaunch: false
          Tags: 
            - Key: Name
              Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
            - Key: Application
              Value:
                Ref: AWS::StackName

######## Create Internet Gateway #######
    InternetGateway: 
        Type: AWS::EC2::InternetGateway
        Properties:
          Tags:
            - Key: Application
              Value:
                Ref: AWS::StackName
######## Attach Internet Gateway to VPC #######
    InternetGatewayAttachment:
        Type:  AWS::EC2::VPCGatewayAttachment
        DependsOn:
        - VPC
        - InternetGateway 
        Properties: 
          VpcId: !Ref VPC 
          InternetGatewayId: !Ref InternetGateway

######## Create Public Route Table #######          
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        DependsOn:
        - VPC
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Routes
                - Key: Application
                  Value:
                    Ref: AWS::StackName

######## Route-out Public Route Table to Internet Gateway (Internet connection)  #######
    DefaultPublicRoute: 
        Type: AWS::EC2::Route
        DependsOn: 
        - InternetGatewayAttachment
        - PublicRouteTable
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

######## Associate Public Route Table with Public Subnet1 & Subnet2 #######    
    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        DependsOn:
        - PublicSubnet1
        - PublicRouteTable
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        DependsOn:
        - PublicSubnet2
        - PublicRouteTable
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2

######## Elastic IPs #######  
    NatGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: 
        - InternetGatewayAttachment
        - VPC
        Properties: 
            Domain: vpc

    NatGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: 
        - InternetGatewayAttachment
        - VPC
        Properties:
            Domain: vpc

    ElasticIPForBastion:
        Type: AWS::EC2::EIP
        DependsOn:
        - VPC
        - NatGateway1EIP
        - NatGateway2EIP
        - NatGateway1
        - NatGateway2
        Properties:
          Domain:
            Ref: VPC

######## NAT GATEWAYS ####### 
    NatGateway1: 
        Type: AWS::EC2::NatGateway
        DependsOn:
        - NatGateway1EIP
        - PublicSubnet1
        Properties: 
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1

    NatGateway2: 
        Type: AWS::EC2::NatGateway
        DependsOn:
        - NatGateway2EIP
        - PublicSubnet2
        Properties:
            AllocationId: !GetAtt NatGateway2EIP.AllocationId
            SubnetId: !Ref PublicSubnet2

######## Create Private Subnets 1 & 2 #######
    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        DependsOn:
        - VPC
        Properties:
          VpcId: !Ref VPC 
          AvailabilityZone: !Select [ 0, !GetAZs '' ]
          CidrBlock: !Ref PrivateSubnet1CIDR
          MapPublicIpOnLaunch: false
          Tags: 
              - Key: Name
                Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
              - Key: Application
                Value:
                  Ref: AWS::StackName

    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        DependsOn:
        - VPC
        Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs '' ]
          CidrBlock: !Ref PrivateSubnet2CIDR
          MapPublicIpOnLaunch: false
          Tags: 
              - Key: Name
                Value: !Sub ${EnvironmentName} Private Subnet (AZ2)
              - Key: Application
                Value:
                  Ref: AWS::StackName

######## Create Private Route Table #######           
    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        DependsOn:
        - VPC
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)
                - Key: Application
                  Value:
                    Ref: AWS::StackName

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        DependsOn:
        - VPC
        Properties: 
          VpcId: !Ref VPC
          Tags: 
            - Key: Name 
              Value: !Sub ${EnvironmentName} Private Routes (AZ2)
            - Key: Application
              Value:
                Ref: AWS::StackName
    
    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        DependsOn:
        - PrivateRouteTable1
        - PrivateSubnet1
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1
    
    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        DependsOn:
        - PrivateRouteTable2
        - PrivateSubnet2
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2

######## Associate Private Route Table with Private Subnet1 & Subnet2 #######
    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        DependsOn:
        - PrivateRouteTable1
        - NatGateway1
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1

    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        DependsOn:
        - PrivateRouteTable2
        - NatGateway2
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

####### Security Group for Bastion Hosts on Public Subnets #######
    SecurityGroupBastion:
        Type: AWS::EC2::SecurityGroup
        DependsOn: VPC
        Properties:
          GroupDescription: Security group for bastion server
          VpcId: !Ref VPC
          SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
          Tags:
            - Key: Name
              Value: !Sub "${EnvironmentName} Bastion Security Group"

####### Security Group for Load Balancer #######
    LoadBalancerSecGroup:
        Type: AWS::EC2::SecurityGroup
        DependsOn: VPC
        Properties:
          GroupDescription: Allow http traffic to and from load balancer
          VpcId: !Ref VPC
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          -   IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
          Tags:
            - Key: Name
              Value: !Sub "${EnvironmentName} Load Balancer Security Group"

####### Security Group for Web Server #######
    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        DependsOn: VPC
        Properties:
            GroupDescription: Allow http and ssh to our load balancer
            VpcId: !Ref VPC
            SecurityGroupIngress:
            -   IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
            - SourceSecurityGroupId: !Ref SecurityGroupBastion
              IpProtocol: tcp
              FromPort: 22
              ToPort: 22
            - SourceSecurityGroupId: !Ref SecurityGroupBastion
              IpProtocol: icmp
              FromPort: 8
              ToPort: -1
            SecurityGroupEgress:
            -   IpProtocol: tcp
                FromPort: 0
                ToPort: 65535
                CidrIp: 0.0.0.0/0
            Tags:
            - Key: Name
              Value: !Sub "${EnvironmentName} Web Server Security Group"


######## S3 Bucket Role & Policies #######    
    UdacityS3ReadOnlyEC2:
        Type: AWS::IAM::Role
        Properties:
            RoleName: 
                !Sub ${EnvironmentName}-Role
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                -   Effect: Allow
                    Principal:
                        Service:
                        - ec2.amazonaws.com
                        - s3.amazonaws.com
                    Action:
                    - sts:AssumeRole
            Path: "/"

    RolePolicies:
        Type: AWS::IAM::Policy
        DependsOn: UdacityS3ReadOnlyEC2
        Properties:
            PolicyName: AmazonS3ReadOnlyAccess
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                - 
                    Effect: Allow
                    Action: 
                    -   s3:Get*
                    -   s3:List*
                    Resource: 
                    -   arn:aws:s3:::webapp-s3bucket-s3cloudfront-w5u9jy13vbmr
                    -   arn:aws:s3:::webapp-s3bucket-s3cloudfront-w5u9jy13vbmr/*
            Roles:
            -   Ref: UdacityS3ReadOnlyEC2

    ProfileWithRolesForOurApp:
        Type: AWS::IAM::InstanceProfile
        DependsOn: UdacityS3ReadOnlyEC2
        Properties:
            Path: "/"
            Roles:
            - Ref: UdacityS3ReadOnlyEC2


####### WebApp AutoScaling Config #######
    WebAppLaunchConfig: 
        Type: AWS::AutoScaling::LaunchConfiguration
        DependsOn:
        - VPC
        - WebServerSecGroup
        - NatGateway1
        - NatGateway2
        - ProfileWithRolesForOurApp
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    apt-get update -y && apt-get upgrade -y
                    apt-get install nginx awscli unzip -y
                    aws s3 cp s3://webapp-s3bucket-s3cloudfront-w5u9jy13vbmr/udacity_udagram.zip .
                    cp -p /var/www/html/index.nginx-debian.html /var/www/html/original-index.nginx-debian.html
                    unzip udacity_udagram.zip
                    cp index.html /var/www/html/index.html
                    cp *.css  /var/www/html/
                    cp *.js /var/www/html/
                    systemctl restart nginx
            ImageId: ami-003634241a8fcdec0
            KeyName: !Ref KeyPairName
            IamInstanceProfile: !Ref ProfileWithRolesForOurApp
            SecurityGroups:
            -   Ref: WebServerSecGroup
            InstanceType: !Ref 'InstanceType'
            BlockDeviceMappings:
            -   DeviceName: "/dev/sdk"
                Ebs:
                    VolumeSize: '10' #10GB

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: !Ref VPC

    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:  
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2 
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            Cooldown: 300
            HealthCheckGracePeriod: 300
            HealthCheckType: EC2
            MinSize: 1
            MaxSize: 6
            DesiredCapacity: !Ref WebServerCapacity
            TargetGroupARNs:
            -   Ref: WebAppTargetGroup
####### WebApp Scaling Actions for the AutoScaling Group #######
    ScalingScaleUp:
      Type: AWS::AutoScaling::ScalingPolicy
      DependsOn:
      - WebAppGroup
      Properties:
        AdjustmentType: ChangeInCapacity
        AutoScalingGroupName:
          Ref: WebAppGroup
        Cooldown: 300
        ScalingAdjustment: '1'
    
    CPUAlarmHigh:
      Type: AWS::CloudWatch::Alarm
      DependsOn:
      - WebAppGroup
      - ScalingScaleUp
      Properties:
        EvaluationPeriods: '1'
        Statistic: Average
        Threshold: 80.0
        AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
        Period: 300
        AlarmActions:
        - Ref: ScalingScaleUp
        Namespace: AWS/EC2
        Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: WebAppGroup
        ComparisonOperator: GreaterThanOrEqualToThreshold
        MetricName: CPUUtilization
    
    ScalingScaleDown:
      Type: AWS::AutoScaling::ScalingPolicy
      DependsOn:
      - WebAppGroup
      Properties:
        AdjustmentType: ChangeInCapacity
        AutoScalingGroupName:
          Ref: WebAppGroup
        Cooldown: 300
        ScalingAdjustment: -1
    
    CPUAlarmLow:
      Type: AWS::CloudWatch::Alarm
      DependsOn:
      - WebAppGroup
      - ScalingScaleDown
      Properties:
        EvaluationPeriods: '1'
        Statistic: Average
        Threshold: 20.0
        AlarmDescription: Alarm if CPU too low or metric disappears indicating instance is down
        Period: 300
        AlarmActions:
        - Ref: ScalingScaleDown
        Namespace: AWS/EC2
        Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: WebAppGroup
        ComparisonOperator: LessThanThreshold
        MetricName: CPUUtilization

####### WebApp ELB Config #######
    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        DependsOn:
        - LoadBalancerSecGroup
        - PublicSubnet1
        - PublicSubnet2
        - WebAppTargetGroup
        Properties:
            SecurityGroups:
            - Ref: LoadBalancerSecGroup
            Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
            Tags:
            - Key: Name
              Value: ELB-httpd

    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        DependsOn:
        - WebAppTargetGroup
        Properties:
            DefaultActions:
            -   Type: forward
                TargetGroupArn:
                    Ref: WebAppTargetGroup
            LoadBalancerArn:
                Ref: WebAppLB
            Port: 80
            Protocol: HTTP

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        DependsOn:
        - WebAppTargetGroup
        Properties:
            Actions:
            -   Type: forward
                TargetGroupArn: !Ref 'WebAppTargetGroup'
            Conditions:
            -   Field: path-pattern
                Values: [/]
            ListenerArn: !Ref 'Listener'
            Priority: 1

######## Create launch Configuration for bastion group #######
    lcBastion:
      Type: AWS::AutoScaling::LaunchConfiguration
      DependsOn:
      - VPC
      - SecurityGroupBastion
      - InternetGatewayAttachment
      Properties: 
          AssociatePublicIpAddress: true
          ImageId: ami-0a243dbef00e96192
          InstanceType: t2.micro
          KeyName: !Ref KeyPairName
          IamInstanceProfile: 
            Ref: ProfileWithRolesForOurApp
          SecurityGroups:
          - Ref: SecurityGroupBastion
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              sudo yum update -y
              sudo yum install -y wget
              sudo wget https://bootstrap.pypa.io/get-pip.py 
              sudo python get-pip.py --user
              sudo pip install aws-ec2-assign-elastic-ip
              sudo /usr/local/bin/aws-ec2-assign-elastic-ip

  ######## Auto-scaling group for BastionHost to access webservers #######
    asgbastionhost:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        VPCZoneIdentifier: 
        - Ref: PublicSubnet1
        Cooldown: 300
        DesiredCapacity: 1
        HealthCheckGracePeriod: 300
        HealthCheckType: EC2
        MaxSize: 1
        MinSize: 1
        LaunchConfigurationName:
          Ref: lcBastion

####### OUTPUTS #######            
Outputs:

    VPC:
        Description: A reference to the created VPC
        Value: !Ref VPC
        Export:
          Name: !Sub ${EnvironmentName}-VPCID

    PublicSubnets:
        Description: A list of the public subnets
        Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
        Export:
          Name: !Sub ${EnvironmentName}-PUB-NETS

    PrivateSubnets:
        Description: A list of the private subnets
        Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
        Export:
          Name: !Sub ${EnvironmentName}-PRIV-NETS
    
    PublicSubnet1:
        Description: A reference to the public subnet in the 1st Availability Zone
        Value: !Ref PublicSubnet1
        Export:
          Name: !Sub ${EnvironmentName}-PUB-SN-1
  
    PublicSubnet2:
        Description: A reference to the public subnet in the 2nd Availability Zone
        Value: !Ref PublicSubnet2
        Export:
          Name: !Sub ${EnvironmentName}-PUB-SN-2
    
    PrivateSubnet1:
        Description: A reference to the private subnet in the 1st Availability Zone
        Value: !Ref PrivateSubnet1
        Export:
          Name: !Sub ${EnvironmentName}-PRIV-SN-1
  
    PrivateSubnet2:
          Description: A reference to the private subnet in the 2nd Availability Zone
          Value: !Ref PrivateSubnet2
          Export:
            Name: !Sub ${EnvironmentName}-PRIV-SN-2

    LoadBalancerSecGroup: 
        Description: "A reference to the security group for Load balancer"
        Value: !Ref "LoadBalancerSecGroup"

    WebServerSecGroup: 
        Description: "A reference to the security group for Load balancer"
        Value: !Ref "WebServerSecGroup"

    WebAppLoadBalancerDNSName:
        Description: DNS name or Public URL of the Load Balancer
        Value: !Join [ "", [ 'http://', !GetAtt WebAppLB.DNSName ]]
        Export:
            Name: !Sub ${EnvironmentName}-LB-DNSName

    BastionHostEIP:
        Description: The EIP for accessing BastionHost
        Value: 
          Ref: ElasticIPForBastion
        Export:
          Name: BastionHostEIP

